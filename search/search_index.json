{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CUBRID Vector CUBRID Vector Database Specification","title":"Home"},{"location":"#cubrid-vector","text":"CUBRID Vector Database Specification","title":"CUBRID Vector"},{"location":"vector-ddl/","text":"Vector DDL vector -- Equivalent to vector(2000) vector ( 512 ) -- 512-dimensional vector of float32 vector ( float64 , 128 ) -- 128-dimensional vector of float64 BNF < declaration > ::= \"vector\" [ \"(\" [ < vector_type > \",\" ] < dim > \")\" ] < vector_type > ::= \"float32\" | \"binary\" < dim > ::= < positive_integer > < positive_integer > ::= {digit}+ <dim> is a positive integer value between 1 and 2000 inclusive if and only if <vector_type> is float32. between 1 and 64000 inclusive if and only if <vector_type> is binary. Examples Create table CREATE TABLE items ( host_year INT NOT NULL PRIMARY KEY , embedding vector ( 3 ) ); Create column ALTER TABLE items ADD COLUMN embedding vector ( 3 );","title":"Vector DDL"},{"location":"vector-ddl/#vector-ddl","text":"vector -- Equivalent to vector(2000) vector ( 512 ) -- 512-dimensional vector of float32 vector ( float64 , 128 ) -- 128-dimensional vector of float64","title":"Vector DDL"},{"location":"vector-ddl/#bnf","text":"< declaration > ::= \"vector\" [ \"(\" [ < vector_type > \",\" ] < dim > \")\" ] < vector_type > ::= \"float32\" | \"binary\" < dim > ::= < positive_integer > < positive_integer > ::= {digit}+ <dim> is a positive integer value between 1 and 2000 inclusive if and only if <vector_type> is float32. between 1 and 64000 inclusive if and only if <vector_type> is binary.","title":"BNF"},{"location":"vector-ddl/#examples","text":"","title":"Examples"},{"location":"vector-ddl/#create-table","text":"CREATE TABLE items ( host_year INT NOT NULL PRIMARY KEY , embedding vector ( 3 ) );","title":"Create table"},{"location":"vector-ddl/#create-column","text":"ALTER TABLE items ADD COLUMN embedding vector ( 3 );","title":"Create column"},{"location":"vector-dml/","text":"Vector DML This page outlines the CRUD operations (Create, Read, Update, Delete) for vectors in a database. Create and Insert a Vector into a Table To insert vectors into a table: INSERT INTO items ( embedding ) VALUES ( '[1,2,3]' ), ( '[4,5,6]' ); Read Vectors To retrieve vectors from the table: SELECT * FROM items LIMIT 5 ; Read Nearest Neighbor Vectors You can retrieve the nearest neighbors using either vector distance operators or functions. Using a distance operator: SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5 ; Using a distance function: SELECT name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ; Both of the above queries are equivalent. If no vector index is present, the \"exact nearest neighbor\" algorithm is applied. If a vector index exists, it will be used automatically. Note on Multiple Vector Indices You can create multiple indices for a single vector column, but each index must correspond to a different type of distance operator. A single vector column can only have one index for each distance type. Control Vector Index Usage /*+ VECTOR_INDEX_SCAN (my_col_name) */ : force vector index /*+ NO_VECTOR_INDEX_SCAN */ : force prevent vector index Force the usage of vector index, if present First, you need to create an ANN vector index on 'embedding' column of table 'items'. Refer to Vector Index page. You can place a hint to force the optimizer to use the vector index if present. If no index is found, the optimizer silently ignores the hint. SELECT /*+ VECTOR_INDEX_SCAN (my_col_name) */ name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ; Abort the usage of vector index SELECT /*+ NO_VECTOR_INDEX_SCAN */ name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ; Update vector UPDATE items SET embedding = '[1, 2, 3]' WHERE id = 1 ; Delete vector DELETE FROM items WHERE id = 1 ;","title":"Vector DML"},{"location":"vector-dml/#vector-dml","text":"This page outlines the CRUD operations (Create, Read, Update, Delete) for vectors in a database.","title":"Vector DML"},{"location":"vector-dml/#create-and-insert-a-vector-into-a-table","text":"To insert vectors into a table: INSERT INTO items ( embedding ) VALUES ( '[1,2,3]' ), ( '[4,5,6]' );","title":"Create and Insert a Vector into a Table"},{"location":"vector-dml/#read-vectors","text":"To retrieve vectors from the table: SELECT * FROM items LIMIT 5 ;","title":"Read Vectors"},{"location":"vector-dml/#read-nearest-neighbor-vectors","text":"You can retrieve the nearest neighbors using either vector distance operators or functions. Using a distance operator: SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5 ; Using a distance function: SELECT name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ; Both of the above queries are equivalent. If no vector index is present, the \"exact nearest neighbor\" algorithm is applied. If a vector index exists, it will be used automatically. Note on Multiple Vector Indices You can create multiple indices for a single vector column, but each index must correspond to a different type of distance operator. A single vector column can only have one index for each distance type.","title":"Read Nearest Neighbor Vectors"},{"location":"vector-dml/#control-vector-index-usage","text":"/*+ VECTOR_INDEX_SCAN (my_col_name) */ : force vector index /*+ NO_VECTOR_INDEX_SCAN */ : force prevent vector index","title":"Control Vector Index Usage"},{"location":"vector-dml/#force-the-usage-of-vector-index-if-present","text":"First, you need to create an ANN vector index on 'embedding' column of table 'items'. Refer to Vector Index page. You can place a hint to force the optimizer to use the vector index if present. If no index is found, the optimizer silently ignores the hint. SELECT /*+ VECTOR_INDEX_SCAN (my_col_name) */ name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ;","title":"Force the usage of vector index, if present"},{"location":"vector-dml/#abort-the-usage-of-vector-index","text":"SELECT /*+ NO_VECTOR_INDEX_SCAN */ name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ;","title":"Abort the usage of vector index"},{"location":"vector-dml/#update-vector","text":"UPDATE items SET embedding = '[1, 2, 3]' WHERE id = 1 ;","title":"Update vector"},{"location":"vector-dml/#delete-vector","text":"DELETE FROM items WHERE id = 1 ;","title":"Delete vector"},{"location":"vector-index/","text":"Vector Index This page outlines the CRUD operations for vector indices in CUBRID database. CUBRID only supports HNSW index at the moment. Create a Vector Index In order to create a vector index, one must specify: the table and the column name where the index will be created onto, the metric function used for distance calculation, the index construction parameters (for HNSW, this will be ef_construction and M ). In order to effectively use the HNSW index, one must specify: the search parameter (for HNSW, this will be ef_search ). BNF < create_vector_index > ::= \"CREATE VECTOR INDEX\" < index_name > \"ON\" < table_name > \"(\" < column_name > < metric_function > \")\" < with_options > < index_name > ::= < identifier > < table_name > ::= < identifier > < column_name > ::= < identifier > < metric_function > ::= < cosine > < cosine > ::= \"cosine\" < with_options > ::= \"WITH\" \"(\" < option_list > \")\" < option_list > ::= < option > | < option > \",\" < option_list > < option > ::= < parameter > \"=\" < value > < parameter > ::= \"m\" | \"ef_construction\" < value > ::= < integer > < identifier > ::= [A-Za-z_][A-Za-z_0-9]* < integer > ::= [0-9]+ m is the maximum number of connections (edges) each node (vector) can have in the graph at each layer of the HNSW structure. It is also known as the degree of each node in the graph. ef_construction controls the size of the dynamic candidate list when inserting elements during the index construction phase. It defines how many neighbors are checked during the construction of the graph when new vectors are added. Examples CREATE VECTOR INDEX embedding_hnsw_idx ON items ( embedding cosine ) WITH ( m = 16 , ef_construction = 64 ); Inspect Vector Index Options SELECT embedding_hnsw_idx FROM items ; Configure Search parameter ef_search is the exploration factor during search. It is a parameter in the HNSW algorithm that controls the number of nearest neighbor candidates to explore during a search query. If ef_search is not specified, it is set to the same value as the ef_construction of the index by default. SELECT /*+ VECTOR_INDEX_SCAN (embedding) */ name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 WITH ( ef_search = 64 ); Update Vector Index Not implemented yet. Delete Vector Index DROP INDEX embedding_hnsw_idx ; Vector Index Configuration Memory Usage # filename: cubrid.conf vector_memory_size = 8 G","title":"Vector Index"},{"location":"vector-index/#vector-index","text":"This page outlines the CRUD operations for vector indices in CUBRID database. CUBRID only supports HNSW index at the moment.","title":"Vector Index"},{"location":"vector-index/#create-a-vector-index","text":"In order to create a vector index, one must specify: the table and the column name where the index will be created onto, the metric function used for distance calculation, the index construction parameters (for HNSW, this will be ef_construction and M ). In order to effectively use the HNSW index, one must specify: the search parameter (for HNSW, this will be ef_search ).","title":"Create a Vector Index"},{"location":"vector-index/#bnf","text":"< create_vector_index > ::= \"CREATE VECTOR INDEX\" < index_name > \"ON\" < table_name > \"(\" < column_name > < metric_function > \")\" < with_options > < index_name > ::= < identifier > < table_name > ::= < identifier > < column_name > ::= < identifier > < metric_function > ::= < cosine > < cosine > ::= \"cosine\" < with_options > ::= \"WITH\" \"(\" < option_list > \")\" < option_list > ::= < option > | < option > \",\" < option_list > < option > ::= < parameter > \"=\" < value > < parameter > ::= \"m\" | \"ef_construction\" < value > ::= < integer > < identifier > ::= [A-Za-z_][A-Za-z_0-9]* < integer > ::= [0-9]+ m is the maximum number of connections (edges) each node (vector) can have in the graph at each layer of the HNSW structure. It is also known as the degree of each node in the graph. ef_construction controls the size of the dynamic candidate list when inserting elements during the index construction phase. It defines how many neighbors are checked during the construction of the graph when new vectors are added.","title":"BNF"},{"location":"vector-index/#examples","text":"CREATE VECTOR INDEX embedding_hnsw_idx ON items ( embedding cosine ) WITH ( m = 16 , ef_construction = 64 );","title":"Examples"},{"location":"vector-index/#inspect-vector-index-options","text":"SELECT embedding_hnsw_idx FROM items ;","title":"Inspect Vector Index Options"},{"location":"vector-index/#configure-search-parameter","text":"ef_search is the exploration factor during search. It is a parameter in the HNSW algorithm that controls the number of nearest neighbor candidates to explore during a search query. If ef_search is not specified, it is set to the same value as the ef_construction of the index by default. SELECT /*+ VECTOR_INDEX_SCAN (embedding) */ name FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 WITH ( ef_search = 64 );","title":"Configure Search parameter"},{"location":"vector-index/#update-vector-index","text":"Not implemented yet.","title":"Update Vector Index"},{"location":"vector-index/#delete-vector-index","text":"DROP INDEX embedding_hnsw_idx ;","title":"Delete Vector Index"},{"location":"vector-index/#vector-index-configuration","text":"","title":"Vector Index Configuration"},{"location":"vector-index/#memory-usage","text":"# filename: cubrid.conf vector_memory_size = 8 G","title":"Memory Usage"},{"location":"vector-operations/","text":"Vector Operations This page describes the supported vector operations. Vector Distance Operations","title":"Vector Operations"},{"location":"vector-operations/#vector-operations","text":"This page describes the supported vector operations.","title":"Vector Operations"},{"location":"vector-operations/#vector-distance-operations","text":"","title":"Vector Distance Operations"}]}