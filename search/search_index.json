{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CUBRID Vector CUBRID Vector Database Specification","title":"Home"},{"location":"#cubrid-vector","text":"CUBRID Vector Database Specification","title":"CUBRID Vector"},{"location":"vector-ddl/","text":"Vector DDL vector -- Equivalent to vector(2000) vector ( 512 ) -- 512-dimensional vector of float32 vector ( float64 , 128 ) -- 128-dimensional vector of float64 BNF < declaration > ::= \"vector\" [ \"(\" [ < vector_type > \",\" ] < dim > \")\" ] < vector_type > ::= \"float32\" | \"binary\" < dim > ::= < positive_integer > < positive_integer > ::= {digit}+ <dim> is a positive integer value between 1 and 2000 inclusive if and only if <vector_type> is float32. between 1 and 64000 inclusive if and only if <vector_type> is binary. Examples Create table CREATE TABLE items ( host_year INT NOT NULL PRIMARY KEY , embedding vector ( 3 ) ); Create column ALTER TABLE items ADD COLUMN embedding vector ( 3 );","title":"Vector DDL"},{"location":"vector-ddl/#vector-ddl","text":"vector -- Equivalent to vector(2000) vector ( 512 ) -- 512-dimensional vector of float32 vector ( float64 , 128 ) -- 128-dimensional vector of float64","title":"Vector DDL"},{"location":"vector-ddl/#bnf","text":"< declaration > ::= \"vector\" [ \"(\" [ < vector_type > \",\" ] < dim > \")\" ] < vector_type > ::= \"float32\" | \"binary\" < dim > ::= < positive_integer > < positive_integer > ::= {digit}+ <dim> is a positive integer value between 1 and 2000 inclusive if and only if <vector_type> is float32. between 1 and 64000 inclusive if and only if <vector_type> is binary.","title":"BNF"},{"location":"vector-ddl/#examples","text":"","title":"Examples"},{"location":"vector-ddl/#create-table","text":"CREATE TABLE items ( host_year INT NOT NULL PRIMARY KEY , embedding vector ( 3 ) );","title":"Create table"},{"location":"vector-ddl/#create-column","text":"ALTER TABLE items ADD COLUMN embedding vector ( 3 );","title":"Create column"},{"location":"vector-dml/","text":"Vector DML This page describes CRUD operations on vectors. Create and insert vector into a table INSERT INTO items ( embedding ) VALUES ( '[1,2,3]' ), ( '[4,5,6]' ); Read vectors SELECT * FROM items LIMIT 5 ; Read nearest neighbor vectors (Exact) By using vector distance operators SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5 ; Or, by using vector distance functions SELECT * FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ; The above two statements are equivalent. Read vector with vector index (Approximate) Update vector Delete vector","title":"Vector DML"},{"location":"vector-dml/#vector-dml","text":"This page describes CRUD operations on vectors.","title":"Vector DML"},{"location":"vector-dml/#create-and-insert-vector-into-a-table","text":"INSERT INTO items ( embedding ) VALUES ( '[1,2,3]' ), ( '[4,5,6]' );","title":"Create and insert vector into a table"},{"location":"vector-dml/#read-vectors","text":"SELECT * FROM items LIMIT 5 ;","title":"Read vectors"},{"location":"vector-dml/#read-nearest-neighbor-vectors-exact","text":"By using vector distance operators SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5 ; Or, by using vector distance functions SELECT * FROM items ORDER BY l2_distance ( embedding , '[3, 1, 2]' ) LIMIT 5 ; The above two statements are equivalent.","title":"Read nearest neighbor vectors (Exact)"},{"location":"vector-dml/#read-vector-with-vector-index-approximate","text":"","title":"Read vector with vector index (Approximate)"},{"location":"vector-dml/#update-vector","text":"","title":"Update vector"},{"location":"vector-dml/#delete-vector","text":"","title":"Delete vector"},{"location":"vector-index/","text":"Vector Index How to","title":"Vector Index"},{"location":"vector-index/#vector-index","text":"How to","title":"Vector Index"}]}